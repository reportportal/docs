"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[44946],{29701:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>h});var s=n(85893),a=n(11151);const i={sidebar_position:25,sidebar_label:"Table Component health check"},o="Table Component health check",r={id:"dashboards-and-widgets/TableComponentHealthCheck",title:"Table Component health check",description:"Shows the detailed statistics of the application components which are indicated by the specified attributes.",source:"@site/docs/dashboards-and-widgets/TableComponentHealthCheck.mdx",sourceDirName:"dashboards-and-widgets",slug:"/dashboards-and-widgets/TableComponentHealthCheck",permalink:"/docs/dashboards-and-widgets/TableComponentHealthCheck",draft:!1,unlisted:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/dashboards-and-widgets/TableComponentHealthCheck.mdx",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25,sidebar_label:"Table Component health check"},sidebar:"docs",previous:{title:"Component health check",permalink:"/docs/dashboards-and-widgets/ComponentHealthCheck"},next:{title:"Most time-consuming test cases widget (TOP-20)",permalink:"/docs/dashboards-and-widgets/MostTimeConsumingTestCasesWidgetTop20"}},l={},h=[{value:"Why can this widget can be useful for your project",id:"why-can-this-widget-can-be-useful-for-your-project",level:2},{value:"Use case #1",id:"use-case-1",level:3},{value:"Use case #2",id:"use-case-2",level:3}];function d(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{MediaViewer:i}=t;return i||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("MediaViewer",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"table-component-health-check",children:"Table Component health check"}),"\n",(0,s.jsx)(t.p,{children:"Shows the detailed statistics of the application components which are indicated by the specified attributes."}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"For using this widget you need to report (or add manually) attributes to test items."})}),"\n",(0,s.jsx)(t.h2,{id:"why-can-this-widget-can-be-useful-for-your-project",children:"Why can this widget can be useful for your project"}),"\n",(0,s.jsx)(t.p,{children:"Let's look at several use cases on how you can utilize Component Health Check Widget."}),"\n",(0,s.jsx)(t.h3,{id:"use-case-1",children:"Use case #1"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case:"})," To track information regarding the latest version in version ",(0,s.jsx)(t.strong,{children:"without filter update"})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Problem:"})," You are a test lead, and you want to track information regarding the latest results without any additional movements. Your version contains several launches: a launch with API test cases, a launch with UI test cases, and a launch with Integration test cases.\nYou need to track summary statistics for the latest results for API launch, UI launch, and Integration launch.\nFor that reason, you have added an attribute 'version: XXX\" to all needed launches, where specify the number of versions. And you have created a filter that includes all launches with the mentioned attribute.\nNow you can create a widget Overall statistics for instance. And this widget will show you a summary of the latest results for version: xxx.\nBut if you run a new version (for instance version: xxx+1), you should repeat previous actions one more time: create the filter, update the widget."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Solution:"})," How you can skip these steps. Create filter which includes 3 launches: API launch, UI launch, and Integration launch. Create a Component Health Check widget (table view) with this filter and add attribute key 'version' for grouping. Now you will see a summary for the latest version every day. If a new version appears in the system, a widget automatically removes info about the previous one and adds the latest version."]}),"\n",(0,s.jsx)(i,{src:n(43652),alt:"Dashboard to manage test results: Component Health Check Table"}),"\n",(0,s.jsx)(t.h3,{id:"use-case-2",children:"Use case #2"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case:"})," To track information regarding components such features/browsers/ platforms/ or others"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Problem:"})," You are running different launches API launch, UI launch, and Integration launch. In these 3 launches, there are test cases which belong to different features. One feature can have test cases with different types: API, UI, Integration. You need to track overall statistics for features, not for launch."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Solution:"})," Create filter which includes 3 launches: API launch, UI launch, and Integration launch. Create a Component Health Check widget (table view) with this filter and add attribute key 'feature' for grouping. Now you will see a summary for all features from different launches."]}),"\n",(0,s.jsx)(i,{src:n(59584),alt:"Component Health Check Table Key Feature"}),"\n",(0,s.jsxs)(t.p,{children:["Widget logic is the same as for ",(0,s.jsx)(t.a,{href:"/dashboards-and-widgets/ComponentHealthCheck",children:"Component health check"}),"."]}),"\n",(0,s.jsx)(i,{src:"https://youtu.be/uRCpA7zivZU",alt:"Component Health Check Table Widget Video",type:"video"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Widget's parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Filter"}),"\n",(0,s.jsx)(t.li,{children:"Parameters: All launches/ Latest launches"}),"\n",(0,s.jsx)(t.li,{children:"The min allowable passing rate for the component: Possible value from 50 - 100%. Default value 100%."}),"\n",(0,s.jsx)(t.li,{children:"Attribute key for the first level (mandatory)"}),"\n",(0,s.jsx)(t.li,{children:"Attribute key for the 2-10 levels (optional)"}),"\n",(0,s.jsx)(t.li,{children:"Custom column"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Widget view"})}),"\n",(0,s.jsx)(t.p,{children:"The widget has a table view. Each line contains information regarding one component (one unique attribute value):"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"component name"}),"\n",(0,s.jsx)(t.li,{children:"component passing rate"}),"\n",(0,s.jsx)(t.li,{children:"statistics: Total/Passed/Failed/Skipped/ Product bugs/ Automation bugs/ System issues/ To investigate"}),"\n",(0,s.jsx)(t.li,{children:"information about attribute value in the custom column"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The total line shows a summary of all components."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Custom column"})}),"\n",(0,s.jsx)(t.p,{children:"Why you may need a custom column? Let's see it in the example."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Use case #3"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case:"})," You need to understand the impact of failed test cases"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Problem:"})," You created a Component Health Check widget and can see a list with features and their passing rate. But you can not understand the importance of failed features."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Solution:"})," Add for all test executions attributes with an attribute key 'priority: XXX'. For instance:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"priority: low"}),"\n",(0,s.jsx)(t.li,{children:"priority: major"}),"\n",(0,s.jsx)(t.li,{children:"priority: critical"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Then add to widget wizard attribute key 'priority' in the custom column field.\nSo that system adds to the widget view information regarding priority to each feature."}),"\n",(0,s.jsxs)(t.p,{children:["*",(0,s.jsx)(t.em,{children:"Custom sorting"})]}),"\n",(0,s.jsx)(t.p,{children:"You can choose how components should be sorted in the table.\nPossible criteria:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Total"}),"\n",(0,s.jsx)(t.li,{children:"Passing rate"}),"\n",(0,s.jsx)(t.li,{children:"Custom column"}),"\n",(0,s.jsx)(t.li,{children:"Failed items"}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Component Health Check widget (table view) is the first widget that uses a materialized view of PostgreSQL. It takes time to create it. So that is why information about new launches in the filter adds dynamically. For that reason, a user should update a widget manually by \u0441licking on the update button. On the widget, a user can see the time for the last update."})})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},43652:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});const s=n.p+"assets/images/ComponentHealthCheckTableBuild-6d3d772d5ab2b02d25e31ab999bc5f6f.png"},59584:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});const s=n.p+"assets/images/ComponentHealthCheckTableFeature-f69052972c2b51f85fc1d5915a4d9d68.png"}}]);