"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[10199],{51149:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"log-data-in-reportportal/test-framework-integration/Python/pytest","title":"ReportPortal pytest Integration","description":"There is an agent to integrate pytest with ReportPortal.","source":"@site/docs/log-data-in-reportportal/test-framework-integration/Python/pytest.md","sourceDirName":"log-data-in-reportportal/test-framework-integration/Python","slug":"/log-data-in-reportportal/test-framework-integration/Python/pytest","permalink":"/docs/log-data-in-reportportal/test-framework-integration/Python/pytest","draft":false,"unlisted":false,"editUrl":"https://github.com/reportportal/docs/blob/develop/docs/log-data-in-reportportal/test-framework-integration/Python/pytest.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"pytest"},"sidebar":"docs","previous":{"title":"Python","permalink":"/docs/log-data-in-reportportal/test-framework-integration/Python/"},"next":{"title":"Robot Framework","permalink":"/docs/log-data-in-reportportal/test-framework-integration/Python/RobotFramework"}}');var i=s(74848),r=s(28453);const o={sidebar_position:1,sidebar_label:"pytest"},l="ReportPortal pytest Integration",a={},d=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Examples",id:"examples",level:2},{value:"Launching",id:"launching",level:2},{value:"Test issue info",id:"test-issue-info",level:2},{value:"Send attachment (screenshots)",id:"send-attachment-screenshots",level:2},{value:"Test internal steps, aka &quot;Nested steps&quot;",id:"test-internal-steps-aka-nested-steps",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"reportportal-pytest-integration",children:"ReportPortal pytest Integration"})}),"\n",(0,i.jsxs)(t.p,{children:["There is an agent to integrate ",(0,i.jsx)(t.a,{href:"https://docs.pytest.org/en/7.3.x/",children:"pytest"})," with ReportPortal."]}),"\n",(0,i.jsx)(t.p,{children:"Pytest is a popular testing framework for Python applications. One of its advantages is the ability to run tests automatically without the manual configuration."}),"\n",(0,i.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(t.p,{children:"To install the pytest plugin, run the following command in the terminal:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    pip install pytest-reportportal\n"})}),"\n",(0,i.jsx)(t.p,{children:"Look through the CONTRIBUTING.rst for contribution guidelines."}),"\n",(0,i.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(t.p,{children:["Create the configuration file ",(0,i.jsx)(t.code,{children:"pytest.ini"})," in the root directory of tests, or alternatively, specify one using a pytest command line option:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    py.test -c config.cfg\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"pytest.ini"})," file should have next mandatory fields:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_api_key"})," - value could be found in the User Profile section"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_project"})," - name of project in ReportPortal"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_endpoint"})," - address of ReportPortal Server"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Example of ",(0,i.jsx)(t.code,{children:"pytest.ini"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    [pytest]\n    rp_api_key = fb586627-32be-47dd-93c1-678873458a5f\n    rp_endpoint = http://192.168.1.10:8080\n    rp_project = user_personal\n    rp_launch = AnyLaunchName\n    rp_launch_attributes = 'PyTest' 'Smoke'\n    rp_launch_description = 'Smoke test'\n    rp_ignore_attributes = 'xfail' 'usefixture'\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"rp_api_key"})," can also be set with the environment variable ",(0,i.jsx)(t.code,{children:"RP_API_KEY"}),". This will override the value set for ",(0,i.jsx)(t.code,{children:"rp_api_key"})," in pytest.ini"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The following parameters are optional:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_client_type = SYNC"})," - Type of the under-the-hood ReportPortal client implementation. Possible values: [SYNC, ASYNC_THREAD, ASYNC_BATCHED]."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_launch = AnyLaunchName"})," - launch name (could be overridden by pytest --rp-launch option, default value is 'Pytest Launch')."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_launch_id = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"})," - id of the existing launch (the session will not handle the lifecycle of the given launch)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_launch_attributes = 'PyTest' 'Smoke' 'Env:Python3'"})," - list of attributes for launch."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_launch_description = 'Smoke test'"})," - launch description (could be overridden by pytest --rp-launch-description option, default value is '')."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_launch_timeout = 86400"})," - Maximum time to wait for child processes finish, default value: 86400 seconds (1 day)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_launch_uuid_print = True"})," - Enables printing Launch UUID on test run start. Default ",(0,i.jsx)(t.code,{children:"False"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_launch_uuid_print_output = stderr"})," - Launch UUID print output. Default ",(0,i.jsx)(t.code,{children:"stdout"}),". Possible values: [stderr, stdout]."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_parent_item_id = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"})," - id of the existing test item for session to use as parent item for the tests (the session will not handle the lifecycle of the given test item)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_tests_attributes = 'PyTest' 'Smoke'"})," - list of attributes that will be added for each item in the launch."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_report_fixtures = False"})," - Enable reporting fixtures as test items. Possible values: [True, False]."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_connect_timeout = 15"}),' - Connection timeout to ReportPortal server. Default value is "10.0".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_read_timeout = 15"}),' - Response read timeout for ReportPortal connection. Default value is "10.0".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_log_batch_size = 20"})," - size of batch log request."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_log_batch_payload_size = 65000000"})," - maximum payload size in bytes of async batch log requests."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_log_level = INFO"})," - The log level that will be reported."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_log_format = [%(levelname)7s] (%(name)s) %(message)s (%(filename)s:%(lineno)s)"})," - Format string to be used for logs sent to the service."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_ignore_attributes = 'xfail' 'usefixture'"})," - Ignore specified pytest markers."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_is_skipped_an_issue = False"})," - Treat skipped tests as required investigation. Default ",(0,i.jsx)(t.code,{children:"True"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_hierarchy_dirs_level = 0"})," - Directory starting hierarchy level (from pytest.ini level) (default ",(0,i.jsx)(t.code,{children:"0"}),")."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_hierarchy_dirs = True"})," - Enables hierarchy for tests directories, default ",(0,i.jsx)(t.code,{children:"False"}),". Doesn't support 'xdist' plugin."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_hierarchy_dir_path_separator"})," - Path separator to display directories in test hierarchy. In case of empty value current system path separator will be used (os.path.sep)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_hierarchy_code"})," - Enables hierarchy for inner classes and parametrized tests, default ",(0,i.jsx)(t.code,{children:"False"}),". Doesn't support 'xdist' plugin."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_bts_issue_url = https://bugzilla.some.com/show_bug.cgi?id={issue_id}"})," - issue URL (issue_id will be filled by parameter from ",(0,i.jsx)(t.code,{children:"@pytest.mark.issue"})," decorator). Fill this parameter if you want to automatically link failed test with an external issue or put a comment into ReportPortal defect."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_bts_project = PROJECT"})," - Bug Tracking System Project name to use along with ",(0,i.jsx)(t.code,{children:"@pytest.mark.issue"})," decorator. Fill this parameter if you want to automatically link failed test with an external issue. Should be the same as in corresponding integration."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_bts_url = https://bugzilla.some.com/"})," - Bug Tracking System base URL to use along with ",(0,i.jsx)(t.code,{children:"@pytest.mark.issue"})," decorator. Fill this parameter if you want to automatically link failed test with an external issue. Should be the same as in corresponding integration."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_issue_id_marks = True"}),' - Enables adding marks for issue ids (e.g. "issue:123456").']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_verify_ssl = True"})," - Verify SSL when connecting to the server."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_mode = DEFAULT"})," - DEBUG or DEFAULT launch mode. DEBUG launches are displayed in a separate tab and not visible to anyone except owner."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_thread_logging"})," - EXPERIMENTAL - Enables support for reporting logs from threads by patching the builtin Thread class. Use with caution."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"rp_api_retries = 0"})," - Amount of retries for performing REST calls to RP server."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["If you like to override the above parameters from command line, or from CI environment based on your build, then pass ",(0,i.jsx)(t.code,{children:'-o "rp_launch_attributes=Smoke Tests"'})," during invocation."]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:"To log the test item flow to ReportPortal, use the Python logging handler provided by the plugin, as shown below:"}),"\n",(0,i.jsx)(t.p,{children:"in conftest.py:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'    import logging\n    import sys\n\n    import pytest\n\n    from reportportal_client import RPLogger\n\n\n    @pytest.fixture(scope="session")\n    def rp_logger():\n        logger = logging.getLogger(__name__)\n        logger.setLevel(logging.DEBUG)\n        logging.setLoggerClass(RPLogger)\n        return logger\n'})}),"\n",(0,i.jsx)(t.p,{children:"in tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'\n    # In this case only INFO messages will be sent to the ReportPortal.\n    def test_one(rp_logger):\n        rp_logger.info("Case1. Step1")\n        x = "this"\n        rp_logger.info("x is: %s", x)\n        assert \'h\' in x\n\n        # Message with an attachment.\n        import subprocess\n        free_memory = subprocess.check_output("free -h".split())\n        rp_logger.info(\n            "Case1. Memory consumption",\n            attachment={\n                "name": "free_memory.txt",\n                "data": free_memory,\n                "mime": "application/octet-stream",\n            },\n        )\n\n        # This debug message will not be sent to the ReportPortal.\n        rp_logger.debug("Case1. Debug message")\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Plugin can report doc-strings of tests as ",(0,i.jsx)(t.code,{children:"descriptions"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'    def test_one():\n        """\n        Description of the test case which will be sent to ReportPortal\n        """\n        pass\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Pytest markers will be attached as ",(0,i.jsx)(t.code,{children:"attributes"})," to ReportPortal items.\nIn the following example attributes 'linux' and 'win32' will be used:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    import pytest\n\n    @pytest.mark.win32\n    @pytest.mark.linux\n    def test_one():\n        pass\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If you don't want to attach specific markers, list them in ",(0,i.jsx)(t.code,{children:"rp_ignore_attributes"})," parameter."]}),"\n",(0,i.jsx)(t.h2,{id:"launching",children:"Launching"}),"\n",(0,i.jsx)(t.p,{children:"To execute a test with ReportPortal, you need to include the '--reportportal' flag:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    py.test ./tests --reportportal\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-issue-info",children:"Test issue info"}),"\n",(0,i.jsx)(t.p,{children:"Some pytest marks could be used to specify information about skipped or failed test result."}),"\n",(0,i.jsx)(t.p,{children:"The following mark fields are used to get information about test issue:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"issue_id"})," - issue id (or list) in tracking system. This id will be added as comment to test fail result. If URL is specified in pytest ini file (see ",(0,i.jsx)(t.code,{children:"rp_issue_system_url"}),"), id will added as link to tracking system."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"reason"})," - some comment that will be added to test fail description."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"issue_type"})," - short name of RP issue type that should be assigned to failed or skipped test."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'    @pytest.mark.issue(issue_id="111111", reason="Some bug", issue_type="PB")\n    def test():\n        assert False\n'})}),"\n",(0,i.jsx)(t.h2,{id:"send-attachment-screenshots",children:"Send attachment (screenshots)"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/reportportal/client-Python#send-attachment-screenshots",children:"https://github.com/reportportal/client-Python#send-attachment-screenshots"})}),"\n",(0,i.jsx)(t.h2,{id:"test-internal-steps-aka-nested-steps",children:'Test internal steps, aka "Nested steps"'}),"\n",(0,i.jsx)(t.p,{children:"To implement Nested steps reporting please follow our guide:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/reportportal/client-Python/wiki/Nested-steps",children:"https://github.com/reportportal/client-Python/wiki/Nested-steps"})}),"\n",(0,i.jsx)(t.p,{children:"Also, there are examples of usage:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/reportportal/examples-python/blob/master/pytest/tests/test_nested_steps.py",children:"https://github.com/reportportal/examples-python/blob/master/pytest/tests/test_nested_steps.py"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/reportportal/examples-python/blob/master/pytest/tests/test_nested_steps_ui.py",children:"https://github.com/reportportal/examples-python/blob/master/pytest/tests/test_nested_steps_ui.py"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(t.p,{children:["If you would like to temporary disable integrations with ReportPortal just\ndeactivate ",(0,i.jsx)(t.code,{children:"pytest_reportportal"})," plugin with command like:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    py.test -p no:pytest_reportportal ./tests\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);