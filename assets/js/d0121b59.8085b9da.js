"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[12166],{69851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(85893),r=n(11151);const s={sidebar_label:"Integration with Bitrise CI/CD"},o="Integration with Bitrise CI/CD",a={id:"quality-gates/IntegrationWithCICD/IntegrationWithBitrise",title:"Integration with Bitrise CI/CD",description:"This tutorial guides you through the process of integrating ReportPortal with Bitrise CI/CD for Android and iOS projects. We'll use a Bitrise workflow defined in the bitrise.yml file. The workflow includes steps for running application tests, capturing the ReportPortal Launch ID, and implementing a Quality Gate check.",source:"@site/docs/quality-gates/IntegrationWithCICD/IntegrationWithBitrise.md",sourceDirName:"quality-gates/IntegrationWithCICD",slug:"/quality-gates/IntegrationWithCICD/IntegrationWithBitrise",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithBitrise",draft:!1,unlisted:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/quality-gates/IntegrationWithCICD/IntegrationWithBitrise.md",tags:[],version:"current",frontMatter:{sidebar_label:"Integration with Bitrise CI/CD"},sidebar:"docs",previous:{title:"Integration with Azure DevOps",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithAzureDevOps"},next:{title:"Integration with CircleCI",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithCircleCI"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Bitrise Workflow Overview",id:"bitrise-workflow-overview",level:2},{value:"Configuring Bitrise Workflow",id:"configuring-bitrise-workflow",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Step 1: Activate SSH Key and clone Git repo",id:"step-1-activate-ssh-key-and-clone-git-repo",level:3},{value:"Step 2: AVD Manager (for Andriod)",id:"step-2-avd-manager-for-andriod",level:3},{value:"Step 3: Run application build and test",id:"step-3-run-application-build-and-test",level:3},{value:"Step 4: Quality Gate",id:"step-4-quality-gate",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"integration-with-bitrise-cicd",children:"Integration with Bitrise CI/CD"}),"\n",(0,i.jsxs)(t.p,{children:["This tutorial guides you through the process of integrating ReportPortal with Bitrise CI/CD for Android and iOS projects. We'll use a Bitrise workflow defined in the ",(0,i.jsx)(t.code,{children:"bitrise.yml"})," file. The workflow includes steps for running application tests, capturing the ReportPortal Launch ID, and implementing a Quality Gate check."]}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(t.p,{children:"Before you begin, make sure you have the following:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"A Bitrise account and an Android/iOS project set up on Bitrise."}),"\n",(0,i.jsx)(t.li,{children:"ReportPortal account and a project created."}),"\n",(0,i.jsxs)(t.li,{children:["Bitrise ",(0,i.jsx)(t.code,{children:"bitrise.yml"})," file with necessary configurations."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"bitrise-workflow-overview",children:"Bitrise Workflow Overview"}),"\n",(0,i.jsx)(t.p,{children:"The Bitrise workflow for integrating ReportPortal consists of the following key steps:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Activate SSH key (if needed):"})," Required for git authorization."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Git clone:"})," Get your application repository."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"AVD Manager (for Andriod):"})," Set up Android Virtual Devices (AVDs)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Run application build and test:"})," Execute JUnit/XCTest tests depending on platform."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Capture Launch ID:"})," Extract the ReportPortal Launch ID from the test execution logs."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Quality Gate:"})," Check the Quality Gate status on ReportPortal using the captured Launch ID."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"configuring-bitrise-workflow",children:"Configuring Bitrise Workflow"}),"\n",(0,i.jsx)(t.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(t.p,{children:"Set the following environment variables in your Bitrise project:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"RP_INSTANCE_URL"}),": The URL of your ReportPortal instance."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"RP_PROJECT"}),": The ReportPortal project name."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"REQUEST_TIMEOUT_SECONDS"}),": Timeout for ReportPortal API requests."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"SCRIPT_TIMEOUT_SECONDS"}),": Timeout for the entire script execution."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In ",(0,i.jsx)(t.strong,{children:"Secrets"})," section add the following sensitive variable:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"RP_API_KEY"}),": Your API key from ReportPortal."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"step-1-activate-ssh-key-and-clone-git-repo",children:"Step 1: Activate SSH Key and clone Git repo"}),"\n",(0,i.jsx)(t.p,{children:"Ensure that the SSH key is activated if required for your project. Then you need to clone the repo with your code."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'- activate-ssh-key@4:\n    run_if: \'{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}\'\n- git-clone@8: {}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"step-2-avd-manager-for-andriod",children:"Step 2: AVD Manager (for Andriod)"}),"\n",(0,i.jsx)(t.p,{children:"Set up Android Virtual Devices (AVDs) for testing."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"- avd-manager@1: {}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"step-3-run-application-build-and-test",children:"Step 3: Run application build and test"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"This step will be different depending on which platform you are running the build"})}),"\n",(0,i.jsx)(t.p,{children:"Android example:"}),"\n",(0,i.jsxs)(t.p,{children:["Execute JUnit tests using Gradle. The test execution logs are captured in ",(0,i.jsx)(t.code,{children:"./console.log"}),".\nThen we are extracting the Launch ID to use it in the next step."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"- script@1:\n    title: Run application build and test\n    inputs:\n      content: |-\n        # Show AVD devices created in step 2\n        adb devices\n\n        # Run Gradle build\n        ./gradlew junit5:connectedAndroidTest | tee ./console.log\n\n        # Extract Launch ID and save to a file\n        sed -nE 's/.*ReportPortal Launch Link: .*\\/([0-9]+).*/export RP_LAUNCH_ID=\\1/p' console.log > launch.env\n        cat launch.env\n"})}),"\n",(0,i.jsx)(t.p,{children:"iOS example:"}),"\n",(0,i.jsxs)(t.p,{children:["Execute XCTest tests using xcodebuild. The test execution logs are captured in ",(0,i.jsx)(t.code,{children:"./console.log"}),".\nThen we are extracting the Launch ID to use it in the next step."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"- script@1:\n    title: Run application build and test\n    inputs:\n      content: |-\n\n        # Run xcode build\n        xcodebuild test -project <Your-Project>.xcodeproj | tee ./console.log\n\n        # Extract Launch ID and save to a file\n        sed -nE 's/.*ReportPortal Launch Link: .*\\/([0-9]+).*/export RP_LAUNCH_ID=\\1/p' console.log > launch.env\n        cat launch.env\n"})}),"\n",(0,i.jsx)(t.h3,{id:"step-4-quality-gate",children:"Step 4: Quality Gate"}),"\n",(0,i.jsxs)(t.p,{children:["Execute JUnit tests using Gradle. The test execution logs are captured in ",(0,i.jsx)(t.code,{children:"./console.log"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'- script@1:\n    inputs:\n      content: |\n        #!/usr/bin/env bash\n\n        # Fail the pipeline in case of errors\n        set -o pipefail\n\n        # Get $RP_LAUNCH_ID from launch.env\n        source launch.env\n\n        QUALITY_GATE_STATUS=""\n        START_TIME=$(date +%s)\n\n        # Loop until quality gate status is obtained or timeout is reached\n        while [[ -z "$QUALITY_GATE_STATUS" && $(( $(date +%s) - START_TIME )) -lt $SCRIPT_TIMEOUT_SECONDS ]]; do\n          printf "Waiting for quality gate status...\\n"\n          sleep 10\n\n          # Retrieve quality gate status using curl and jq\n          QUALITY_GATE_STATUS=$(curl -s --retry 3 --max-time "$REQUEST_TIMEOUT_SECONDS" -H "Authorization: Bearer $RP_API_KEY" "$RP_INSTANCE_URL/api/v1/$RP_PROJECT/launch/$RP_LAUNCH_ID" | jq -r \'.metadata.qualityGate.status // empty\')\n        done\n\n        # Check quality gate status and take appropriate action\n        if [[ "$QUALITY_GATE_STATUS" != "PASSED" ]]; then\n          printf "Quality gate status: %s\\nFailing the pipeline.\\n" "$QUALITY_GATE_STATUS"\n          exit 1\n        else\n          printf "Quality gate status: %s\\nPipeline passed.\\n" "$QUALITY_GATE_STATUS"\n        fi\n    title: Quality gate\n\n'})}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"By following this guide, you've integrated ReportPortal with Bitrise CI/CD for Android and iOS projects. The Bitrise workflow ensures that JUnit tests are executed, the ReportPortal Launch ID is captured, and a Quality Gate check is performed."}),"\n",(0,i.jsxs)(t.p,{children:["Please note that the provided ",(0,i.jsx)(t.code,{children:"bitrise.yml"})," file and configurations are specific to Android projects. Adjustments may be needed for projects in different languages or platforms."]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);