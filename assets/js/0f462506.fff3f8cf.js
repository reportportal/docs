"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7546],{83645:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"installation-steps/HardwareRequirements","title":"Hardware Requirements","description":"Find below the recommended hardware configuration to set up ReportPortal and have good performance using our centralized test automation tool.","source":"@site/docs/installation-steps/HardwareRequirements.mdx","sourceDirName":"installation-steps","slug":"/installation-steps/HardwareRequirements","permalink":"/docs/installation-steps/HardwareRequirements","draft":false,"unlisted":false,"editUrl":"https://github.com/reportportal/docs/blob/develop/docs/installation-steps/HardwareRequirements.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Hardware Requirements"},"sidebar":"docs","previous":{"title":"Installation Steps","permalink":"/docs/installation-steps/"},"next":{"title":"Deploy with Docker","permalink":"/docs/installation-steps/DeployWithDocker"}}');var t=s(74848),i=s(28453);const a={sidebar_position:1,sidebar_label:"Hardware Requirements"},d="Hardware Requirements",c={},l=[{value:"1.  Disk I/O",id:"1--disk-io",level:2},{value:"2. CPU utilization",id:"2-cpu-utilization",level:2},{value:"3. Which scale I need? Configuration testing results and saturation points",id:"3-which-scale-i-need-configuration-testing-results-and-saturation-points",level:2},{value:"4. The database separately from other services",id:"4-the-database-separately-from-other-services",level:2},{value:"5. PostgreSQL Performance Tuning",id:"5-postgresql-performance-tuning",level:2},{value:"6. Application connections pool tuning",id:"6-application-connections-pool-tuning",level:2}];function o(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"hardware-requirements",children:"Hardware Requirements"})}),"\n",(0,t.jsx)(n.p,{children:"Find below the recommended hardware configuration to set up ReportPortal and have good performance using our centralized test automation tool."}),"\n",(0,t.jsx)(n.h2,{id:"1--disk-io",children:"1.  Disk I/O"}),"\n",(0,t.jsxs)(n.p,{children:["To speed up PostgreSQL database performance, on instance strongly recommended use ",(0,t.jsx)(n.strong,{children:"SSD disk"})," hardware."]}),"\n",(0,t.jsx)(n.h2,{id:"2-cpu-utilization",children:"2. CPU utilization"}),"\n",(0,t.jsxs)(n.p,{children:["Consider choosing the ",(0,t.jsx)(n.strong,{children:"CPU optimized"})," instances to reduce high CPU utilization of the ReportPortal service-API and speed up ReportPortal overall."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Azure"}),": Fsv2-series instances,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS"}),": c5 instances."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The instance capacity(4 CPUs/8Gb RAM or 8 CPUs/16Gb RAM etc.) should be selected regarding average reporting test-cases/day and average CPU/RAM utilization. If the CPU/RAM utilization of the ReportPortal instance up to 100% a long time daily, consider scale up the VM x2."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"System hardware requirements"})}),"\n",(0,t.jsx)(n.p,{children:"Simple Docker installation from the box:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Server type"}),(0,t.jsx)(n.th,{children:"CPU's"}),(0,t.jsx)(n.th,{children:"RAM size, Gb"}),(0,t.jsx)(n.th,{children:"Disk space, Gb"}),(0,t.jsx)(n.th,{children:"Disk type"}),(0,t.jsx)(n.th,{children:"AWS Shape"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Small"}),(0,t.jsx)(n.td,{children:"4"}),(0,t.jsx)(n.td,{children:"8"}),(0,t.jsx)(n.td,{children:"300"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"c5.xlarge"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Middle"}),(0,t.jsx)(n.td,{children:"8"}),(0,t.jsx)(n.td,{children:"16"}),(0,t.jsx)(n.td,{children:"500"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"c5.2xlarge"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Middle+"}),(0,t.jsx)(n.td,{children:"16"}),(0,t.jsx)(n.td,{children:"32"}),(0,t.jsx)(n.td,{children:"1000"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"c5.4xlarge"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Large"}),(0,t.jsx)(n.td,{children:"32"}),(0,t.jsx)(n.td,{children:"64"}),(0,t.jsx)(n.td,{children:"2000"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"c5a.8xlarge"})]})]})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Server"}),(0,t.jsx)(n.th,{children:"EKS Nodes (Count)"}),(0,t.jsx)(n.th,{children:"EKS Nodes (Instance Type)"}),(0,t.jsx)(n.th,{children:"EKS Nodes (Disk Size GB)"}),(0,t.jsx)(n.th,{children:"EKS Nodes (Disk Type)"}),(0,t.jsx)(n.th,{children:"Amazon RDS (Instance Type)"}),(0,t.jsx)(n.th,{children:"Amazon RDS (Disk Size GB)"}),(0,t.jsx)(n.th,{children:"Amazon RDS (Disk Type)"}),(0,t.jsx)(n.th,{children:"Additional Volumes (RabbitMQ)"}),(0,t.jsx)(n.th,{children:"S3 Binary storage"}),(0,t.jsx)(n.th,{children:"Monthly Cost"}),(0,t.jsx)(n.th,{children:"Yearly Cost"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Small"}),(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"m5.large"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"db.m6g.large"}),(0,t.jsx)(n.td,{children:"300"}),(0,t.jsx)(n.td,{children:"gp3"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"200"}),(0,t.jsx)(n.td,{children:"$544.48"}),(0,t.jsx)(n.td,{children:"$6,533.76"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Middle"}),(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"c5.xlarge"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"db.m6g.xlarge"}),(0,t.jsx)(n.td,{children:"500"}),(0,t.jsx)(n.td,{children:"gp3"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"300"}),(0,t.jsx)(n.td,{children:"$892.04"}),(0,t.jsx)(n.td,{children:"$10,704.48"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Middle+"}),(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"c5.xlarge"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"db.m6g.2xlarge"}),(0,t.jsx)(n.td,{children:"1000"}),(0,t.jsx)(n.td,{children:"gp3"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"500"}),(0,t.jsx)(n.td,{children:"$1,241.38"}),(0,t.jsx)(n.td,{children:"$14,896.56"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Large"}),(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"c5.2xlarge"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"gp2"}),(0,t.jsx)(n.td,{children:"db.m6g.4xlarge"}),(0,t.jsx)(n.td,{children:"2500"}),(0,t.jsx)(n.td,{children:"gp3"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"1000"}),(0,t.jsx)(n.td,{children:"$2,497.28"}),(0,t.jsx)(n.td,{children:"$29,967.36"})]})]})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The approximate server's cost is relevant for the current cost of infrastructure on AWS. The estimated server cost is the current cost of the AWS infrastructure. When changing any cost of resources, costs need to be recalculated.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"\nThese costs are calculated for the Frankfurt eu-central-1 region, including $73.00 for the EKS cluster and $29.71 for Elastic Load Balancing (Application). The costs for EBS volumes related to OpenSearch are not included, as the amount can vary for small and large instances, and we support both single-node and multi-node OpenSearch setups. Additionally, the costs do not cover the VPC or other network infrastructure components."]})}),"\n",(0,t.jsx)(n.h2,{id:"3-which-scale-i-need-configuration-testing-results-and-saturation-points",children:"3. Which scale I need? Configuration testing results and saturation points"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What does Saturation and vUser means? How to transform it into test cases?"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"RPS"})," means ",(0,t.jsx)(n.em,{children:"Requests Per Second"}),". Any request to server to upload, create, read the data. In ReportPortal terms it can be request to create Launch (execution), Test Suite, Test case, log line. Read data or update data."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Saturation"})," (in RPS) can be assumed as maximum capacity of your configuration (app deployed on specifics instance type) which can procced requests without significant response time degradation. Let's say ",(0,t.jsx)(n.code,{children:"upper limit"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"vUser"})," means ",(0,t.jsx)(n.em,{children:"Virtual user"})," which describes regular model of behaviour of user (API client) which interacts with your system. Under vUser we assume test framework integration which will generate:"]}),"\n",(0,t.jsx)(n.p,{children:"\u25fe\ufe0f 3 Launches with"}),"\n",(0,t.jsx)(n.p,{children:"\u25fe\ufe0f\u25fe\ufe0f 3 suites inside, with"}),"\n",(0,t.jsx)(n.p,{children:"\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f 3 test classes inside, with"}),"\n",(0,t.jsx)(n.p,{children:"\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f 3 test cases inside, with"}),"\n",(0,t.jsx)(n.p,{children:"\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f 5 steps inside, with"}),"\n",(0,t.jsx)(n.p,{children:"\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f\u25fe\ufe0f 10 logs inside for each step."}),"\n",(0,t.jsx)(n.p,{children:"Which practically will generate:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"10 * 5 * 3 * 3 * 3 * 3 = (4050)"})," ",(0,t.jsx)(n.code,{children:"createLog"})," requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"5 * 3 * 3 * 3 * 3 = (405)"})," ",(0,t.jsx)(n.code,{children:"startStep"})," requests and equal amount of ",(0,t.jsx)(n.code,{children:"finishStep"})," requests. Total 810"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"3 * 3 * 3 * 3 = (81)"})," ",(0,t.jsx)(n.code,{children:"startTest"})," requests and equal amount of ",(0,t.jsx)(n.code,{children:"finishTest"})," requests (inclluding all precondition methods, as ",(0,t.jsx)(n.code,{children:"@After"})," and ",(0,t.jsx)(n.code,{children:"@Before"})," in Java). Total 162"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"3 * 3 * 3 = (27)"})," ",(0,t.jsx)(n.code,{children:"startTestClass"})," requests and equal amount of ",(0,t.jsx)(n.code,{children:"finishTestClass"})," requests. Total 54"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"3 * 3 = (9)"})," ",(0,t.jsx)(n.code,{children:"startSuite"})," requests and equal amount of ",(0,t.jsx)(n.code,{children:"finishSuite"})," requests. Total 18"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"3 = (3)"})," ",(0,t.jsx)(n.code,{children:"startLaunch"})," requests and equal amount of ",(0,t.jsx)(n.code,{children:"finishLaunch"})," requests. Total 6"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Default configuration of integration sends logs in batches (",(0,t.jsx)(n.code,{children:"rp.batch.size.logs = 20"}),") which combines 20 requests at once into 1 batch request for ",(0,t.jsx)(n.code,{children:"createLog"}),". And minimize count of ",(0,t.jsx)(n.code,{children:"createLog"})," requests from 4050 to 203.\nIn grand total such a structure creates 3 Launches with 243 test case inside and produces 1253 requests."]}),"\n",(0,t.jsx)(n.p,{children:"Now we can divide their number by the duration in seconds, and get the RPS result. if it runs for 6 minutes (2 minutes each lunch), then: 60s * 6 = 360 and 1253 / 360 ~=4.5 requests per second."}),"\n",(0,t.jsx)(n.p,{children:"If launches will be executed in parallel, 3 at the time, then RPS will be equal to 4.5*3 = 13.5 rps."}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Summary"})}),"\n",(0,t.jsx)(n.p,{children:"Having information regarding number of test cases in your framework, average number of logs, number of parallel threads and durations, you can calculate system capacity according to the tables below."}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Configuration testing results"})}),"\n",(0,t.jsx)(n.p,{children:"The purpose of the configuration performance testing is to determine saturation points and overall system capacity for different instance sizes and specifications. Testing was conducted on the \u04215 instances which are optimized for compute-intensive workloads and deliver cost-effective high performance at a low price per compute ratio(Compute Optimized Instances) with Up to 3.4GHz, and single core turbo frequency of up to 3.5 GHz 2nd generation Intel Xeon Scalable Processors (Cascade Lake) or 1st generation Intel Xeon Platinum 8000 series (Skylake-SP) processor with a sustained all core Turbo frequency."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Application and Database are deployed on separate VMs"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Instance Type"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Saturation point, rps"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"vUsers count"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Disk IOPS"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Java Options"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"\u04415.xlarge"}),(0,t.jsx)(n.td,{children:"640"}),(0,t.jsx)(n.td,{children:"60"}),(0,t.jsx)(n.td,{children:"up to 3000"}),(0,t.jsx)(n.td,{children:"-Xmx1g"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"c5.2xlarge"}),(0,t.jsx)(n.td,{children:"1374"}),(0,t.jsx)(n.td,{children:"115"}),(0,t.jsx)(n.td,{children:"up to 4000"}),(0,t.jsx)(n.td,{children:"-Xmx2g"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"c5.4xlarge"}),(0,t.jsx)(n.td,{children:"3104"}),(0,t.jsx)(n.td,{children:"356"}),(0,t.jsx)(n.td,{children:"up to 8000"}),(0,t.jsx)(n.td,{children:"-Xmx3g"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"\u04415.9xlarge"}),(0,t.jsx)(n.td,{children:"5700"}),(0,t.jsx)(n.td,{children:"489"}),(0,t.jsx)(n.td,{children:"up to 10000"}),(0,t.jsx)(n.td,{children:"-Xmx4g"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Application and Database are deployed on single VM"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Instance Type"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Saturation point, rps"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"vUsers count"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Disk IOPS"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Java Options"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"\u04415.xlarge"}),(0,t.jsx)(n.td,{children:"521"}),(0,t.jsx)(n.td,{children:"50"}),(0,t.jsx)(n.td,{children:"up to 3000"}),(0,t.jsx)(n.td,{children:"-Xmx1g"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"c5.2xlarge"}),(0,t.jsx)(n.td,{children:"1078"}),(0,t.jsx)(n.td,{children:"83"}),(0,t.jsx)(n.td,{children:"up to 4000"}),(0,t.jsx)(n.td,{children:"-Xmx2g"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"c5.4xlarge"}),(0,t.jsx)(n.td,{children:"2940"}),(0,t.jsx)(n.td,{children:"305"}),(0,t.jsx)(n.td,{children:"up to 8000"}),(0,t.jsx)(n.td,{children:"-Xmx3g"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"\u04415.9xlarge"}),(0,t.jsx)(n.td,{children:"5227"}),(0,t.jsx)(n.td,{children:"440"}),(0,t.jsx)(n.td,{children:"up to 10000"}),(0,t.jsx)(n.td,{children:"-Xmx4g"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"4-the-database-separately-from-other-services",children:"4. The database separately from other services"}),"\n",(0,t.jsx)(n.p,{children:"Consider deploying the database separately from other RP services. It allows increasing throughput of the server and performance of the ReportPortal overall. This can be, for example, AWS RDS PostgreSQL Database or a separate VM only for the PostgreSQL database."}),"\n",(0,t.jsx)(n.p,{children:"The separate database instance should be the same by CPU's and RAM, but started from middle+ server type, the database instance may need to have doubled CPU's and RAM size in comparison with the application instance.\nThis is explained by the fact that with an increase in the size of the database and the number of concurrent users, the load is distributed more on the database server: increased volume of resources(CPU, memory, IOPS number, etc.) required to performing each DB query since it handles / can handle more data volume and/or can handle of a greater number of concurrent users."}),"\n",(0,t.jsx)(n.p,{children:"Example for the middle+ server:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Instance type"}),(0,t.jsx)(n.th,{children:"CPU's"}),(0,t.jsx)(n.th,{children:"RAM size, Gb"}),(0,t.jsx)(n.th,{children:"Disk space, Gb"}),(0,t.jsx)(n.th,{children:"AWS Shape"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Application instance"}),(0,t.jsx)(n.td,{children:"16"}),(0,t.jsx)(n.td,{children:"32"}),(0,t.jsx)(n.td,{children:"200"}),(0,t.jsx)(n.td,{children:"c5.4xlarge"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Database instance"}),(0,t.jsx)(n.td,{children:"16"}),(0,t.jsx)(n.td,{children:"32"}),(0,t.jsx)(n.td,{children:"1000"}),(0,t.jsx)(n.td,{children:"c5.4xlarge"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"5-postgresql-performance-tuning",children:"5. PostgreSQL Performance Tuning"}),"\n",(0,t.jsx)(n.p,{children:"Since PostgreSQL Database is used, it needs some set of special configs for the best performance. These set contains two categories:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"general and universal for any capacity of the instance hardware:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"effective_io_concurrency=200\nrandom_page_cost=0.1\nseq_page_cost=1\nmin_wal_size=1GB\nmax_wal_size=4GB\nwal_buffers=16MB\ndefault_statistics_target=100\nsynchronous_commit=off\nwal_writer_delay=10ms\ncheckpoint_completion_target=0.9\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"based on CPU/RAM size at the instance(example for 4 CPUs/8GB RAM; the database is deployed on the separate VM):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"shared_buffers=2GB\neffective_cache_size=6GB\nmaintenance_work_mem=512MB\nwork_mem=96MB\nmax_worker_processes=4\nmax_parallel_workers_per_gather=2\nmax_parallel_workers=4\nmax_parallel_maintenance_workers=2\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Recommendations regarding ",(0,t.jsx)(n.strong,{children:"PostgreSQL server tuning"})," for the instance with 8 CPUs/16GB RAM(where all RP services are deployed):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"shared_buffers=4GB\neffective_cache_size=8GB\nwal_buffers=16MB\ndefault_statistics_target=100\neffective_io_concurrency=200\nwork_mem=96MB\nmin_wal_size=1GB\nsynchronous_commit=off\nwal_writer_delay=10ms\nmaintenance_work_mem=1GB\nseq_page_cost=1\ncheckpoint_completion_target=0.9\nrandom_page_cost=0.1\nmax_wal_size=4GB\nmax_worker_processes=8\nmax_parallel_workers_per_gather=4\nmax_parallel_workers=8\nmax_parallel_maintenance_workers=4\n"})}),"\n",(0,t.jsx)(n.p,{children:'If the PostgreSQL database and services are deployed on the separate VM\u2019s, the "effective_cache_size" parameter should be changed to "12GB"(total RAM size - shared_buffers size).'}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Simple ways to set these parameters:"})}),"\n",(0,t.jsx)(n.p,{children:"CPU\u2019s count related:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"max_worker_processes = <DB instance CPU\u2019s count>\nmax_parallel_workers_per_gather = <DB instance CPU\u2019s count / 2>\nmax_parallel_workers = <DB instance CPU\u2019s count>\nmax_parallel_maintenance_workers = <DB instance CPU\u2019s count / 2>\n"})}),"\n",(0,t.jsx)(n.p,{children:"RAM size related:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"shared_buffers = <DB instance RAM size in GB / 4>\neffective_cache_size = <DB instance RAM size in GB - shared_buffers>\nmaintenance_work_mem = < if total RAM size > 16 Gb \u2013 2Gb; under 16Gb \u2013 1Gb and less>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For the ",(0,t.jsx)(n.strong,{children:"docker-compose:"})," add the following lines to the ",(0,t.jsx)(n.em,{children:"command"})," section by the \u201c-c\u201d option to ",(0,t.jsx)(n.em,{children:"\u201cpostgres\u201d"})," service."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"postgres:\n  image: postgres:12-alpine\n  shm_size: '512m'\n  ...\n  command:\n    -c effective_io_concurrency=200\n    -c random_page_cost=0.1\n    -c seq_page_cost=1\n    ...\n    # Some another configs\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For the ",(0,t.jsx)(n.strong,{children:"AWS RDS:"})," create new parameter group(",(0,t.jsx)(n.em,{children:"Services -> RDS -> Parameter groups -> Create parameter group"}),"), search config by the name and set up the following values, then apply created parameter group to the RDS DB."]}),"\n",(0,t.jsx)(n.p,{children:"The following parameters can be scaled and depends on CPU\u2019s number and RAM size of the instance. For example, for the instance 16 CPUs/32GB RAM(the database is deployed on the separate VM) this parameters should be:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"shared_buffers = '8GB'\neffective_cache_size = '24GB'\nmax_worker_processes = '16'\nmax_parallel_workers = '16'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"6-application-connections-pool-tuning",children:"6. Application connections pool tuning"}),"\n",(0,t.jsx)(n.p,{children:"By default, ReportPortal has 27 connections on service-api and 27 connections in pool on service-authorization.\nIn general these values are valid for the small and middle servers. But from the middle+ server type, the connection pool may be increased if it's not enough for your server load."}),"\n",(0,t.jsx)(n.p,{children:'It can be detected as periodic freezes and the "Loading" message when opening any page, and/or slowing down the work with RP after a certain period of time during active reporting and use with UI. Restarts of API and UAT services can also be observed.'}),"\n",(0,t.jsx)(n.p,{children:"To increasing the connection pool on both services, need to add next environment variables to the service-api and to the service-authorization:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"RP_DATASOURCE_MAXIMUMPOOLSIZE=100\n"})}),"\n",(0,t.jsx)(n.p,{children:"After increasing the connection pool from the application side, do not forget increase the max_connections from the Database side, using following DB configuration paramether:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"max_connections=500\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"The values of these parameters are given for example only, but in general, can be valid for all types of loads for servers middle+ and large."})}),"\n",(0,t.jsx)(n.p,{children:"Please note, that the max_connections paramether must be more than the sum of the RP_DATASOURCE_MAXIMUMPOOLSIZE for the API and the UAT services + several connections for connecting to the database from outside."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);