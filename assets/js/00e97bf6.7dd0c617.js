"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8898],{46978:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"dashboards-and-widgets/TableComponentHealthCheck","title":"Table Component health check","description":"See which components need attention, compare metrics across builds, and quickly investigate failures to keep your system running smoothly.","source":"@site/docs/dashboards-and-widgets/TableComponentHealthCheck.mdx","sourceDirName":"dashboards-and-widgets","slug":"/dashboards-and-widgets/TableComponentHealthCheck","permalink":"/docs/dashboards-and-widgets/TableComponentHealthCheck","draft":false,"unlisted":false,"editUrl":"https://github.com/reportportal/docs/blob/develop/docs/dashboards-and-widgets/TableComponentHealthCheck.mdx","tags":[],"version":"current","sidebarPosition":25,"frontMatter":{"sidebar_position":25,"sidebar_label":"Table Component health check","description":"See which components need attention, compare metrics across builds, and quickly investigate failures to keep your system running smoothly."},"sidebar":"docs","previous":{"title":"Component health check","permalink":"/docs/dashboards-and-widgets/ComponentHealthCheck"},"next":{"title":"Most time-consuming test cases widget (TOP-20)","permalink":"/docs/dashboards-and-widgets/MostTimeConsumingTestCasesWidgetTop20"}}');var i=s(74848),a=s(28453);const o={sidebar_position:25,sidebar_label:"Table Component health check",description:"See which components need attention, compare metrics across builds, and quickly investigate failures to keep your system running smoothly."},r="Table Component health check",l={},c=[{value:"Widget&#39;s parameters:",id:"widgets-parameters",level:2},{value:"Widget View",id:"widget-view",level:2},{value:"Use case #1",id:"use-case-1",level:2},{value:"Use case #2",id:"use-case-2",level:2},{value:"Use case #3",id:"use-case-3",level:2}];function d(e){const t={admonition:"admonition",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{MediaViewer:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("MediaViewer",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"table-component-health-check",children:"Table Component health check"})}),"\n",(0,i.jsx)(t.p,{children:"Shows the detailed statistics of the application components which are indicated by the specified attributes with an ability to exclude Skipped tests from the statistics.\nAs far as the widget contains complicated queries, the widget can be rendering some time (~10 min)."}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"To use this widget, you need to report (or manually add) attributes to test items."})}),"\n",(0,i.jsx)(t.h2,{id:"widgets-parameters",children:"Widget's parameters:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Filter"}),"\n",(0,i.jsx)(t.li,{children:"Parameters: All Launches/Latest Launches"}),"\n",(0,i.jsx)(t.li,{children:"Checkbox 'Exclude Skipped Tests from Statistics'"}),"\n",(0,i.jsx)(t.li,{children:"The minimum allowable passing rate for the component: possible values range from 50 - 100%. The default value is 100%."}),"\n",(0,i.jsx)(t.li,{children:"Attribute key for the first level (mandatory)"}),"\n",(0,i.jsx)(t.li,{children:"Attribute key for the 2nd to 10th levels (optional)"}),"\n",(0,i.jsx)(t.li,{children:"Custom column (enter an attribute key - optional)"}),"\n",(0,i.jsx)(t.li,{children:"Sorting: 'Sort By' dropdown with the options 'Custom Column', 'Total', 'Passing Rate', 'Failed Items'. The default value is 'Passing Rate'."}),"\n"]}),"\n",(0,i.jsx)(n,{src:s(59257),alt:"Create Component Health Check Table widget in our test reporting tool"}),"\n",(0,i.jsxs)(t.p,{children:["When the ",(0,i.jsx)(t.strong,{children:"checkbox 'Exclude Skipped tests from statistics' is selected"}),", the passing rate is calculated based on the total number of test cases, excluding the skipped tests."]}),"\n",(0,i.jsxs)(t.p,{children:["When the ",(0,i.jsx)(t.strong,{children:"checkbox 'Exclude Skipped tests from statistics' is not selected"}),", the passing rate is calculated based on the total number of test cases, including the skipped tests."]}),"\n",(0,i.jsx)(t.h2,{id:"widget-view",children:"Widget View"}),"\n",(0,i.jsx)(t.p,{children:"The widget has a table view. Each line contains information about one component (one unique attribute value):"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Component name"}),"\n",(0,i.jsx)(t.li,{children:"Component passing rate"}),"\n",(0,i.jsx)(t.li,{children:"Statistics: Total/Passed/Failed/Skipped/Product bugs/ Automation bugs/System issues/To investigate"}),"\n",(0,i.jsx)(t.li,{children:"Information about attribute value in the custom column"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The total line presents a summary of all components."}),"\n",(0,i.jsx)(n,{src:s(47162),alt:"Component Health Check Table view"}),"\n",(0,i.jsxs)(t.p,{children:["When you click on ",(0,i.jsx)(t.strong,{children:"'Total'"})," test cases for the component and checkbox 'Exclude Skipped tests from statistics' is not selected, system redirects you to the test item view. Test items with statuses Passed, Failed, Interrupted, Skipped are displayed."]}),"\n",(0,i.jsxs)(t.p,{children:["When you click on ",(0,i.jsx)(t.strong,{children:"'Total'"})," test cases for the component and checkbox 'Exclude Skipped tests from statistics' is selected, system redirects you to the test item view. Test items with statuses Passed, Failed and Interrupted are displayed."]}),"\n",(0,i.jsxs)(t.p,{children:["When you click on ",(0,i.jsx)(t.strong,{children:"'Passed'"})," test cases for the component (if any) and checkbox 'Exclude Skipped tests from statistics' is not selected, system redirects you to the test item view. Test items with statuses Passed are displayed."]}),"\n",(0,i.jsxs)(t.p,{children:["When you click on ",(0,i.jsx)(t.strong,{children:"'Passed'"})," test cases for the component (if any) and checkbox 'Exclude Skipped tests from statistics' is selected, system redirects you to the test item view. Test items with statuses Passed are displayed."]}),"\n",(0,i.jsxs)(t.p,{children:["When you click on ",(0,i.jsx)(t.strong,{children:"'Failed'"})," test cases for the component (if any) and checkbox 'Exclude Skipped tests from statistics' is not selected, system redirects you to the test item view. Test items with statuses Failed, Interrupted are displayed."]}),"\n",(0,i.jsxs)(t.p,{children:["When you click on ",(0,i.jsx)(t.strong,{children:"'Failed'"})," test cases for the component (if any) and checkbox 'Exclude Skipped tests from statistics' is selected system redirects you to the test item view. Test items with statuses Failed, Interrupted are displayed."]}),"\n",(0,i.jsxs)(t.p,{children:["When you click on ",(0,i.jsx)(t.strong,{children:"Skipped"})," test cases for the component (if any) and checkbox 'Exclude Skipped tests from statistics' is not selected, system redirects you to the test item view. Test items with statuses Skipped are displayed."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Custom Column"})}),"\n",(0,i.jsx)(t.p,{children:"Why might you need a custom column? Let's explore this through an example."}),"\n",(0,i.jsx)(t.h2,{id:"use-case-1",children:"Use case #1"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Use Case:"})," You need to understand the impact of failed test cases."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem:"})," You have created a Component Health Check widget and can view a list of features along with their passing rate. However, you cannot ascertain the significance of the failed features."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Solution:"})," For all test executions, add attributes with the attribute key 'priority: XXX'. For instance:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"priority: low"}),"\n",(0,i.jsx)(t.li,{children:"priority: major"}),"\n",(0,i.jsx)(t.li,{children:"priority: critical"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Then, in the widget wizard, add the attribute key 'priority' in the custom column field. This action enables the system to include information regarding the priority of each feature in the widget view."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Custom Sorting"})}),"\n",(0,i.jsx)(t.p,{children:"You can select how components should be sorted in the table. Possible criteria include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Total"}),"\n",(0,i.jsx)(t.li,{children:"Passing Rate"}),"\n",(0,i.jsx)(t.li,{children:"Custom Column"}),"\n",(0,i.jsx)(t.li,{children:"Failed Items"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"use-case-2",children:"Use case #2"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Use Case:"})," To track information about the latest version without updating the filter."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem:"})," As a test lead, you want to track information about the latest results without having to make additional adjustments. Your version contains several launches: a launch with API test cases, a launch with UI test cases, and a launch with Integration test cases. You aim to track the summary statistics of the latest results for the API launch, UI launch, and Integration launch. For this, you've added an attribute 'version: XXX' to all the necessary launches, denoting the number of versions. You've also created a filter including all launches with the respective attribute. Now, you can create an Overall Statistics widget which will show you a summary of the latest results for version: xxx. But whenever you run a new version (for instance, version: xxx+1), you have to repeatedly carry out the previous steps - creating the filter and updating the widget."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Solution:"})," To avoid these redundant steps, create a filter that includes three launches: API, UI, and Integration. Subsequently, create a Component Health Check widget (table view) with this filter and add the attribute key 'version' for grouping. Now, you will see a summary for the latest version every day. Whenever a new version enters the system, the widget automatically updates to remove information about the previous version and adds information about the latest version."]}),"\n",(0,i.jsx)(n,{src:s(74613),alt:"Track information about the latest version without updating the filter"}),"\n",(0,i.jsx)(t.h2,{id:"use-case-3",children:"Use case #3"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Use Case:"})," To track information about components such as features, browsers, platforms, etc."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem:"})," You are running different launches: API launch, UI launch, and Integration launch. These three launches include test cases that belong to different features. You need to track overall statistics for features, not for launches."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Solution:"})," Create a filter that includes the three launches: API launch, UI launch, and Integration launch. Then, create a Component Health Check widget (table view) with this filter and add the attribute key 'feature' for grouping. As a result, you will see a summary of all features across various launches."]}),"\n",(0,i.jsx)(n,{src:s(36839),alt:"Track information about components"}),"\n",(0,i.jsx)(n,{src:"https://youtu.be/krGfJSrMGOA",alt:"Component Health Check Table widget in our test report dashboard",type:"video"}),"\n",(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsx)(t.p,{children:"The Component Health Check widget (table view) is the first widget to use a materialized view in PostgreSQL. The creation of this view takes time. As a result, information about new launches in the filter is added dynamically. Therefore, users should manually update the widget by clicking on the update button. The time of the last update is displayed on the widget."})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},74613:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const n=s.p+"assets/images/ComponentHealthCheckTableBuild-6d3d772d5ab2b02d25e31ab999bc5f6f.png"},59257:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const n=s.p+"assets/images/ComponentHealthCheckTableCreate-c7f18db5329872640fcb9344f79a77f8.png"},36839:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const n=s.p+"assets/images/ComponentHealthCheckTableFeature-f69052972c2b51f85fc1d5915a4d9d68.png"},47162:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const n=s.p+"assets/images/ComponentHealthCheckTableView-b35cbe2e533ff2be761735370a91349d.png"},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(96540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);