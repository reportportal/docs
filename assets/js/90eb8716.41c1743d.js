"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[26834],{56042:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var n=i(85893),r=i(11151);const l={sidebar_label:"Integration with CircleCI"},o="Integration with CircleCI",a={id:"quality-gates/IntegrationWithCICD/IntegrationWithCircleCI",title:"Integration with CircleCI",description:"This guide will walk you through the process of integrating ReportPortal with CircleCI for Node.js projects. We'll define a job in the .circleci/config.yml file. The job includes steps for application build, running tests, capturing ReportPortal Launch ID, and implementing a Quality Gate check.",source:"@site/docs/quality-gates/IntegrationWithCICD/IntegrationWithCircleCI.md",sourceDirName:"quality-gates/IntegrationWithCICD",slug:"/quality-gates/IntegrationWithCICD/IntegrationWithCircleCI",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithCircleCI",draft:!1,unlisted:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/quality-gates/IntegrationWithCICD/IntegrationWithCircleCI.md",tags:[],version:"current",frontMatter:{sidebar_label:"Integration with CircleCI"},sidebar:"docs",previous:{title:"Integration with Bitrise CI/CD",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithBitrise"},next:{title:"Integration with GitHub Actions",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"CircleCI Job Overview",id:"circleci-job-overview",level:2},{value:"Configuring CircleCI pipeline",id:"configuring-circleci-pipeline",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Step 1: Run application build and tests",id:"step-1-run-application-build-and-tests",level:3},{value:"Step 2: Quality Gate",id:"step-2-quality-gate",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"integration-with-circleci",children:"Integration with CircleCI"}),"\n",(0,n.jsxs)(t.p,{children:["This guide will walk you through the process of integrating ReportPortal with CircleCI for Node.js projects. We'll define a job in the ",(0,n.jsx)(t.code,{children:".circleci/config.yml"})," file. The job includes steps for application build, running tests, capturing ReportPortal Launch ID, and implementing a Quality Gate check."]}),"\n",(0,n.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,n.jsx)(t.p,{children:"Before you start, make sure you have:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["A CircleCI account and a project set up with a ",(0,n.jsx)(t.code,{children:".circleci/config.yml"})," file."]}),"\n",(0,n.jsx)(t.li,{children:"A ReportPortal account and a project created."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"circleci-job-overview",children:"CircleCI Job Overview"}),"\n",(0,n.jsx)(t.p,{children:"A CircleCI job for integrating ReportPortal includes the following key steps:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Run application build and tests:"})," Execute npm tests."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Capture Launch ID:"})," Extract the ReportPortal Launch ID from the output logs of the test execution."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Quality Gate:"})," Check the Quality Gate status on ReportPortal using the Launch ID captured in Step 2."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"configuring-circleci-pipeline",children:"Configuring CircleCI pipeline"}),"\n",(0,n.jsx)(t.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,n.jsx)(t.p,{children:"Define these environment variables in your CircleCI project settings:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"RP_INSTANCE_URL"}),": The URL of your ReportPortal instance."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"RP_PROJECT"}),": The name of your project as it is in ReportPortal."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"RP_API_KEY"}),": Your API key from ReportPortal."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"REQUEST_TIMEOUT_SECONDS"}),": The timeout duration for ReportPortal API requests."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"SCRIPT_TIMEOUT_SECONDS"}),": The timeout duration for the entire script execution."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"step-1-run-application-build-and-tests",children:"Step 1: Run application build and tests"}),"\n",(0,n.jsxs)(t.p,{children:["Update the ",(0,n.jsx)(t.code,{children:".circleci/config.yml"})," file in your project to include the ",(0,n.jsx)(t.em,{children:"build and test"})," job. This job will install npm dependencies, run tests, and capture the ReportPortal Launch ID from the test execution logs."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'version: 2.1\n\njobs:\n  javascript:\n    docker:\n      - image: node:16\n    steps:\n      - checkout\n      - run:\n          name: "Build and test"\n          command: |\n            # Set pipefail option\n            set +o pipefail\n            # Install npm dependencies\n            npm install\n            # Run npm tests and capture the Launch ID\n            npm run test | tee ./console.log\n            LAUNCH_ID=$(sed -nE \'s/.*ReportPortal Launch Link: .*\\/([0-9]+).*/\\1/p\' console.log)\n            echo "RP_LAUNCH_ID=$LAUNCH_ID" >> $BASH_ENV\n'})}),"\n",(0,n.jsx)(t.h3,{id:"step-2-quality-gate",children:"Step 2: Quality Gate"}),"\n",(0,n.jsxs)(t.p,{children:["Extend the ",(0,n.jsx)(t.code,{children:".circleci/config.yml"})," file with the ",(0,n.jsx)(t.em,{children:"quality gates"})," lifecycle script. This script will wait for the Quality Gate status on ReportPortal using the captured ",(0,n.jsx)(t.code,{children:"RP_LAUNCH_ID"}),'. If the status is not "PASSED," the pipeline fails; otherwise, it passes.']}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'      - run:\n          name: "Quality gates"\n          environment:\n            RP_INSTANCE_URL: The URL of your ReportPortal instance.\n            RP_PROJECT: The name of your project as it is in ReportPortal.\n            REQUEST_TIMEOUT_SECONDS: "60"\n            SCRIPT_TIMEOUT_SECONDS: "60"\n          command: |\n            # Download jq for JSON processing\n            wget -q -O jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux64\n            chmod +x ./jq\n            cp jq /usr/bin\n\n            QUALITY_GATE_STATUS=""\n            START_TIME=$(date +%s)\n\n            # Loop until quality gate status is obtained or timeout is reached\n            while [[ -z "$QUALITY_GATE_STATUS" && $(( $(date +%s) - START_TIME )) -lt $SCRIPT_TIMEOUT_SECONDS ]]; do\n              printf "Launch ID $RP_LAUNCH_ID. Waiting for quality gate status....\\n"\n              sleep 10\n            \n              # Retrieve quality gate status using curl and jq\n              QUALITY_GATE_STATUS=$(curl -s --retry 3 --max-time "$REQUEST_TIMEOUT_SECONDS" -H "Authorization: Bearer $RP_API_KEY" "$RP_INSTANCE_URL/api/v1/$RP_PROJECT/launch/$RP_LAUNCH_ID" | jq -r \'.metadata.qualityGate.status // empty\')\n            done\n            \n            # Check quality gate status and take appropriate action\n            if [[ "$QUALITY_GATE_STATUS" != "PASSED" ]]; then\n              printf "Quality gate status: %s\\nFailing the pipeline.\\n" "$QUALITY_GATE_STATUS"\n              exit 1\n            else\n              printf "Quality gate status: %s\\nPipeline passed.\\n" "$QUALITY_GATE_STATUS"\n            fi\nworkflows:\n  javascript-workflow:\n    jobs:\n      - javascript\n'})}),"\n",(0,n.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsxs)(t.p,{children:["By following this guide, the integration of your Node.js project with ReportPortal on CircleCI is complete. The ",(0,n.jsx)(t.code,{children:".circleci/config.yml"})," file now includes a job to run npm tests, capture the ReportPortal Launch ID, and implement a Quality Gate check. If you're using languages or platforms other than Node.js, you may need to adjust these instructions accordingly."]})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);